#include "transformer-rtti/stdlib/Array.h"
#include "transformer-rtti/RecordTypeInfo.h"
#include "transformer-rtti/ArrayTypeInfo.h"
#include "transformer-rtti/EnumTypeInfo.h"

#include "{{ main_file_path }}"
## for include in valueOr(included_files, [])
## if include.was_in_quotes
#include "{{ include.file_path }}"
## else
#include <{{ include.file_path }}>
## endif
## endfor

using namespace transformer::rtti;
## for ns in default(using_namespaces, [])
namespace {{ ns }} {} // TODO(FiTH): remove this HACK! implement own TypePrinter
using namespace {{ ns }};
## endfor

namespace
{

// TODO(FiTH): make namespace with name "c.full_name" or "class_0" and remove "loop.index" from names of fields?
## for c in valueOr(classes, [])
## include default(c.rtti_attributes.template, "class")
## endfor
// TODO(FiTH): inja does not support 'short-circuit evaluation'!
## for canonical_unqualified_type_name, t in used_types
## if default(t.is_record_template, false)
const RecordTemplateTypeInfo used_type_{{ loop.index }} = {
	/* NamedTypeInfo */ {
		/* TypeInfo */ {
			.id   = DB::set_type_info(&used_type_{{ loop.index }}, DB::get_type_id<{{ t.full_name }}>()),
			.kind = TypeKind::RECORD_TEMPLATE_TYPE
		},
		/* .name = */ "{{ t.name }}"
		// TODO(FiTH): /* .full_name = */ "{{ t.full_name }}"
	}
};
## else if t.is_pointer or (t.is_reference and default(t.pointee_type.is_pointer, false))
const PointerTypeInfo used_type_{{ loop.index }} = {
	/* TypeInfo */ {
		.id   = DB::set_type_info<{{ canonical_unqualified_type_name  }}>(&used_type_{{ loop.index }}), // TODO(FiTH): {{ t.name }}
		.kind = TypeKind::POINTER_TYPE
	},
	/* .pointee_type = */ QualifiedType::get_qualified_type<{{ t.pointee_type.name }}>()
};
## else if t.is_array or (t.is_reference and default(t.pointee_type.is_array, false))
const ArrayTypeInfo used_type_{{ loop.index }} = {
	/* PointerTypeInfo */ {
		/* TypeInfo */ {
			.id   = DB::set_type_info<{{ t.name }}>(&used_type_{{ loop.index }}),
			.kind = TypeKind::ARRAY_TYPE
		},
		/* .pointee_type = */ QualifiedType::get_qualified_type<{{ t.pointee_type.name }}>()
	},
	/* .extent = */ {{ t.array_size }}
};
## else if t.is_record
// TODO(FiTH): this is record, it must be reported in file where it was defined: {{ canonical_unqualified_type_name }}.
//             So remove this comment?
## else if t.access != "private"
// static_assert(false, "TODO(FiTH): Warning! Unsupported type: {{ canonical_unqualified_type_name }}");
#warning "TODO(FiTH): Warning! Unsupported type: {{ canonical_unqualified_type_name }}"

/*
	{{ t }}
*/
## else
// TODO(FiTH): private or protected type. Check if we are 'friends' - {{ canonical_unqualified_type_name }}
## endif

## endfor
// TODO(FiTH): "static_cast<e.integer_type>(-...ull)" and "{group_value}ull" - is this UB?))) I hope not...

## for e in valueOr(enums, [])
//
//	{{ e.full_name }}
//

## if length(e.enumerators)
const EnumConstantInfo enum_{{ loop.index }}_enumerators[] = {
## for enumerator in e.enumerators
	{
		.name = "{{ enumerator.name }}",
		.{% if e.integer_type.is_unsigned_integer %}un{% endif %}signed_value = static_cast<{{ e.integer_type.name }}>({{ enumerator.value }}ull)
	},
## endfor
};

## for enumerator in e.enumerators
constexpr uint32_t enum_{{ loop.parent.index }}_{{ enumerator.name }}_index = {{ loop.index }};
## endfor

## endif
## for group_value, enumerators in valueOr(e.enumerators_grouped_by_value, {})
const EnumConstantInfo* const enum_{{ loop.parent.index }}_{{ enumerators.0.name }}_group[] = {
## for en in enumerators
	&enum_{{ loop.parent.parent.index }}_enumerators[enum_{{ loop.parent.parent.index }}_{{ en.name }}_index],
## endfor
};

## endfor
const EnumTypeInfo enum_{{ loop.index }} = {
	/* NamedTypeInfo */ {
		/* TypeInfo */ {
			.id   = DB::set_type_info<{{ e.full_name }}>(&enum_{{ loop.index }}),
			.kind = TypeKind::ENUM_TYPE
		},
		/* .name = */ "{{ e.name }}"
	},
	/* .integer_type          = */ DB::get_type_id<{{ e.integer_type.name }}>(),
	/* .enumerators           = */ {% if length(e.enumerators) %}enum_{{ loop.index }}_enumerators{% else %}{}{% endif %},
	/* .enumerators_map       = */ {
## for enumerator in valueOr(e.enumerators, [])
		{ "{{ enumerator.name }}", &enum_{{ loop.parent.index }}_enumerators[{{ loop.index }}] },
## endfor
	},
	/* .enumerators_value_map = */ {
## for group_value, enumerators in valueOr(e.enumerators_grouped_by_value, {})
		{ {{ group_value }}ull, enum_{{ loop.parent.index }}_{{ enumerators.0.name }}_group },
## endfor
	}
};

## endfor
}
