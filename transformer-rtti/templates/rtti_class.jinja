## if not c.is_templated
//
//	{{ c.full_name }}
//

## if length(c.base_classes)
const RecordBaseInfo class_{{ loop.index }}_bases[] = {
## for base_class_name, b in c.base_classes
	{
## if default(b.is_std_internal_type, false)
		.id     = {}, // TODO(FiTH): std internal type
## else
		.id     = DB::get_type_id<{{ b.name }}>(),
## endif
		.offset = {{ b.offset_in_chars }}
	},
## endfor
};

## endif
## if length(c.fields)
const RecordFieldInfo class_{{ loop.index }}_fields[] = {
## for f in c.fields
	{
		.name      = "{{ f.name }}",
		.offset    = {{ f.offset_in_chars }},
## if f.is_anonymous_struct_or_union
		.qual_type = {} // TODO(FiTH): anonymous struct or union
## else if f.type.access == "private"
		.qual_type = {} // TODO(FiTH): private or protected field. Check if we are 'friends'
## else if default(f.type.is_std_internal_type, false)
		.qual_type = {} // TODO(FiTH): std internal type
## else
		.qual_type = QualifiedType::get_qualified_type<{{ f.type.name }}>()
## endif
	},
## endfor
};

## endif
## if length(c.methods)
// TODO(FiTH): if m.access == "public" OR 'friend class DB;'
## for m in c.methods
## if length(m.parameters)
const RecordMethodParamInfo class_{{ loop.parent.index }}_method_{{ loop.index }}_params[] = {
## for p in m.parameters
	{
		.name = "{{ p.name }}",
		.type = QualifiedType::get_qualified_type<{{ p.type.canonical_name }}>()
	},
## endfor
};

## endif
## endfor
## for m in c.methods
// TODO(FiTH): uncomment this after gcc update to full support of 'requires'
// template<typename T>
// concept is_valid_class_{{ loop.parent.index }}_method_{{ loop.index }} = requires (T self{% for p in valueOr(m.parameters, []) %}, {{ p.type.canonical_name }} arg_{{ loop.index }}{% endfor %}) { // {{ c.full_name }}::{{ m.name }}
// 	self->{{ m.name }}(
## for p in valueOr(m.parameters, [])
// 		arg_{{ loop.index }}{% if not loop.is_last %},{% endif %}
//
## endfor
// 	);
// };
//
## endfor
## for m in c.methods
## if m.access == "public"
template<typename T>
struct is_valid_class_{{ loop.parent.index }}_method_{{ loop.index }}
{
	using  one = char;
	struct two { char data[2]; };

	using return_type = {{ m.return_type.canonical_name }};

	template<typename C> static one test(decltype(static_cast<return_type (C::*)({% for p in valueOr(m.parameters, []) %}{{ p.type.canonical_name }}{% if not loop.is_last %}, {% endif %}{% endfor %})>(&C::{{ m.name }})));
	template<typename C> static two test(...);

	static constexpr bool value = (sizeof(test<T>(nullptr)) == sizeof(one));
};

## endif
## endfor
const RecordMethodInfo class_{{ loop.index }}_methods[] = {
## for m in c.methods
## if m.access == "public"
	{
		// TODO(FiTH): make 2 versions of methods that take argument 'by value' - with copy constructor and move constructor
		.name     = "{{ m.name }}", // {{ m.access }}: {{ m.return_type.name }} {{ c.name }}::{{ m.name }}({% for p in valueOr(m.parameters, []) %}{{ p.type.name }} {{ p.name }}{% if not loop.is_last %}, {% endif %}{% endfor %})
		.ptr      = [](const void* self, void*{% if m.return_type.canonical_name != "void" %} ret {% endif %}, const void*{% if length(m.parameters) %} args{% endif %}[]) noexcept
			{
				[&](auto* self_ptr)
				{
					if constexpr (is_valid_class_{{ loop.parent.index }}_method_{{ loop.index }}<decltype(self_ptr)>::value) {
				// TODO(FiTH): WARNING! VERY IMPORTANT! Re-check logic of passing arguments and returning value for UNNECESSARY COPIES!
				// TODO(FiTH): add debug version? if we are doing 'move' - arg should be able to do this
				// TODO(FiTH): this lambda must be a macro in inja!
				const auto call = [&]() noexcept -> {{ m.return_type.canonical_name }} {
					{% if m.return_type.canonical_name != "void" %}auto&& ret = {% endif %}self_ptr->{{ m.name }}(
## for p in valueOr(m.parameters, [])
						{% if p.type.is_rvalue_reference %}
							std::move(*static_cast<std::remove_reference_t<{{ p.type.canonical_name }}>*>(const_cast<void*>(args[{{ loop.index }}])))
						{% else %}
							[](auto& arg) -> decltype(auto) {
								if constexpr (std::is_copy_constructible_v<decltype(arg)>) return arg;
								else return std::move(arg);
							}(*static_cast<std::remove_reference_t<{{ p.type.canonical_name }}>*>(const_cast<void*>(args[{{ loop.index }}])))
						{% endif %}{% if not loop.is_last %},{% endif %}

## endfor
					);

## if m.return_type.canonical_name != "void"
## if m.return_type.is_reference
					return ret;
## else
					if constexpr (std::is_copy_constructible_v<{{ m.return_type.canonical_name }}>)
						return ret;
					else
						return std::move(ret);
## endif
## endif
				};

## if m.return_type.canonical_name != "void"
				if (ret != nullptr) {
## if m.return_type.is_lvalue_reference
					using return_type = {{ m.return_type.pointee_type.canonical_name }};
					new (ret) return_type* { &call() };
## else
					using return_type = {{ m.return_type.canonical_name }};
					new (ret) return_type { call() };
## endif
				} else {
					call();
				}
## else
				call();
## endif
					} else {
						// TODO(FiTH): assert(false)
					}
				}({% if m.is_const %}static_cast<const {{ c.full_name }}*>(self){% else %}static_cast<{{ c.full_name }}*>(const_cast<void*>(self)){% endif %});
			},
		.is_const = {{ m.is_const }},
		.ret_type = QualifiedType::get_qualified_type<{{ m.return_type.canonical_name }}>(),
		.params   = {% if length(m.parameters) %}class_{{ loop.parent.index }}_method_{{ loop.index }}_params{% else %}{}{% endif %}

	},
## endif
## endfor
};

## endif
## if default(c.is_template_specialization, false)
const TypeID class_{{ loop.index }}_template_args[] = {
## if length(c.template.args)
## for arg in c.template.args
	DB::get_type_id<{{ arg.name }}>(),
## endfor
## else
// TODO(FiTH): not template args? all default? is this a problem?
## endif
};

const RecordTemplateSpecializationTypeInfo class_{{ loop.index }} = {
	/* RecordTypeInfo */ {
		/* NamedTypeInfo */ {
			/* TypeInfo */ {
				.id   = DB::set_type_info(&class_{{ loop.index }}, DB::get_type_id<{{ c.full_name }}>()),
				.kind = TypeKind::RECORD_TEMPLATE_SPECIALIZATION_TYPE
			},
			/* .name = */ "{{ c.name }}"
			// TODO(FiTH): /* .full_name = */ "{{ c.full_name }}"
		},
		/* .bases      = */ {% if length(c.base_classes) %}class_{{ loop.index }}_bases{% else %}{}{% endif %},
		/* .bases_map  = */ {
## for base_class_name, b in valueOr(c.base_classes, {})
			{ class_{{ loop.parent.index }}_bases[{{ loop.index }}].id, &class_{{ loop.parent.index }}_bases[{{ loop.index }}] },
## endfor
		},
		/* .fields     = */ {% if length(c.fields) %}class_{{ loop.index }}_fields{% endif %},
		/* .fields_map = */ { // TODO(FiTH): do same check for 'bases_map'?
## for f in valueOr(c.fields, [])
## if f.is_anonymous_struct_or_union
			// TODO(FiTH): anonymous struct or union
## else if f.type.access == "private"
			// TODO(FiTH): private or protected field. Check if we are 'friends'
## else if default(f.type.is_std_internal_type, false)
			// TODO(FiTH): std internal type
## else
			{ "{{ f.name }}", &class_{{ loop.parent.index }}_fields[{{ loop.index }}] },
## endif
## endfor
		},
		/* .methods     = */ { {% if length(c.methods) %}class_{{ loop.index }}_methods{% else %}{}{% endif %} },
		/* .methods_map = */ { // TODO(FiTH): handle overloaded and templated methods
## set method_index = 0
## for m in valueOr(c.methods, [])
## if m.access == "public"
			{ "{{ m.name }}", &class_{{ loop.parent.index }}_methods[{{ method_index }}] },
## set method_index = method_index + 1
## endif
## endfor
		}
	},
	/* template_type_id = */ DB::get_type_id<{{ c.template.full_name }}>(),
	/* template_args    = */ class_{{ loop.index }}_template_args
};
## else
const RecordTypeInfo class_{{ loop.index }} = { // is record template: {{ default(c.is_record_template, false) }}
	/* NamedTypeInfo */ {
		/* TypeInfo */ {
			.id   = DB::set_type_info<{{ c.full_name }}>(&class_{{ loop.index }}),
			.kind = TypeKind::RECORD_TYPE
		},
		/* .name = */ "{{ c.name }}"
		// TODO(FiTH): /* .full_name = */ "{{ c.full_name }}"
	},
	/* .bases      = */ {% if length(c.base_classes) %}class_{{ loop.index }}_bases{% else %}{}{% endif %},
	/* .bases_map  = */ {
## for base_class_name, b in valueOr(c.base_classes, {})
		{ class_{{ loop.parent.index }}_bases[{{ loop.index }}].id, &class_{{ loop.parent.index }}_bases[{{ loop.index }}] },
## endfor
	},
	/* .fields     = */ {% if length(c.fields) %}class_{{ loop.index }}_fields{% else %}{}{% endif %},
	/* .fields_map = */ { // TODO(FiTH): do same check for 'bases_map'?
## for f in valueOr(c.fields, [])
## if f.is_anonymous_struct_or_union
			// TODO(FiTH): anonymous struct or union
## else if f.type.access == "private"
			// TODO(FiTH): private or protected field. Check if we are 'friends'
## else if default(f.type.is_std_internal_type, false)
			// TODO(FiTH): std internal type
## else
		{ "{{ f.name }}", &class_{{ loop.parent.index }}_fields[{{ loop.index }}] },
## endif
## endfor
	},
	/* .methods     = */ { {% if length(c.methods) %}class_{{ loop.index }}_methods{% endif %} },
	/* .methods_map = */ { // TODO(FiTH): handle overloaded and templated methods
## set method_index = 0
## for m in valueOr(c.methods, [])
## if m.access == "public"
		{ "{{ m.name }}", &class_{{ loop.parent.index }}_methods[{{ method_index }}] },
## set method_index = method_index + 1
## endif
## endfor
		}
};
## endif

## endif
